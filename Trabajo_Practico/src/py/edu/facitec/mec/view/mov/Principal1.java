/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package py.edu.facitec.mec.view.mov;

import java.util.List;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableColumn;
import prueba.Celda_CheckBox;
import prueba.Render_CheckBox;
import py.edu.facitec.mec.controller.CiudadController;
import py.edu.facitec.mec.controller.CiudadControllerImp;
import py.edu.facitec.mec.controller.ClienteController;
import py.edu.facitec.mec.controller.ClienteControllerImpl;
import py.edu.facitec.mec.controller.ServiciosController;
import py.edu.facitec.mec.controller.ServiciosControllerImp;
import py.edu.facitec.mec.model.Ciudad;
import py.edu.facitec.mec.model.Cliente;
import py.edu.facitec.mec.model.Servicio;
import py.edu.facitec.mec.util.SoloMayusculas;
import py.edu.facitec.mec.util.Utilidad;

/**
 *
 * @author Edaurdo Espinola
 */
public class Principal1 extends javax.swing.JFrame {

    /**
     * Creates new form Principal2
     */
    
    CiudadController ciuController;
    ClienteController clieController;
    ServiciosController serController;
    
    DefaultTableModel modelo;
    
    JComboBox< Object > comboCiudad;
    DefaultComboBoxModel modeloCombo;
    List<Ciudad> listaCiudad;

    private boolean edicion;
   
    public Principal1() {
        initComponents();
        ciuController = new CiudadControllerImp();
        clieController = new ClienteControllerImpl();
        serController = new ServiciosControllerImp();
        edicion = false;
        estadoInicial();
        
        this.comboCiudad = new JComboBox<>();
        this.modeloCombo = new DefaultComboBoxModel();
        this.listaCiudad = ciuController.recuperarPorFiltro(tfBusqueda.getText());
        for (int i = 0; i < listaCiudad.size(); i++) {
            modeloCombo.addElement(listaCiudad.get(i).getNombre());
        }
        comboCiudad.setModel(modeloCombo);
        // tfBusqueda.setDocument(new SoloMayusculas());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jrCiudad = new javax.swing.JRadioButton();
        jrCliente = new javax.swing.JRadioButton();
        jrServicio = new javax.swing.JRadioButton();
        tfBusqueda = new javax.swing.JTextField();
        btnConsultar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ABM General");
        setBackground(new java.awt.Color(153, 51, 255));
        setLocationByPlatform(true);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        buttonGroup1.add(jrCiudad);
        jrCiudad.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jrCiudad.setForeground(new java.awt.Color(255, 255, 255));
        jrCiudad.setText("Ciudad");
        jrCiudad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrCiudadActionPerformed(evt);
            }
        });
        getContentPane().add(jrCiudad, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        buttonGroup1.add(jrCliente);
        jrCliente.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jrCliente.setForeground(new java.awt.Color(255, 255, 255));
        jrCliente.setText("Ciente");
        jrCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrClienteActionPerformed(evt);
            }
        });
        getContentPane().add(jrCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 10, -1, -1));

        buttonGroup1.add(jrServicio);
        jrServicio.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jrServicio.setForeground(new java.awt.Color(255, 255, 255));
        jrServicio.setText("Servicio");
        jrServicio.setToolTipText("");
        jrServicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrServicioActionPerformed(evt);
            }
        });
        getContentPane().add(jrServicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 10, -1, -1));
        getContentPane().add(tfBusqueda, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 10, 200, 40));

        btnConsultar.setText("Consultar");
        btnConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarActionPerformed(evt);
            }
        });
        getContentPane().add(btnConsultar, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 10, -1, -1));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
        }

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 700, 231));

        jPanel1.setOpaque(false);
        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        jButton1.setText("Nuevo");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        jPanel1.add(btnGuardar);

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        jPanel1.add(btnEliminar);

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        jPanel1.add(btnCancelar);

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });
        jPanel1.add(btnSalir);

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 340, 700, 49));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 51));
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 58, 700, 27));

        jButton2.setText("Movimiento");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 10, -1, -1));

        jButton3.setText("jButton3");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 40, -1, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/py/edu/facitec/mec/Imagenes/HD-Technology-Wallpaper.jpg"))); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 4, 720, 400));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarActionPerformed
        if (jrCiudad.isSelected()) {
            consultarCiudad();
        }else if (jrCliente.isSelected()) {
            consultarCliente();
        }else if (jrServicio.isSelected()) {
            consultarServicio();
        }else{
            JOptionPane.showMessageDialog(this, "Debe seleccionar una opción", "Aviso", 1);
        }
    }//GEN-LAST:event_btnConsultarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        if (jrCiudad.isSelected()) {
            guardarCiudad();
        }else if (jrCliente.isSelected()) {
            guardarCliente();
        }else if (jrServicio.isSelected()) {
            guardarServicio();
        }else{
            JOptionPane.showMessageDialog(this, "Debe seleccionar una opción", "Aviso", 1);
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        limpiar();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (jrCiudad.isSelected()) {
            insertarNuevaCiudad();
        }else if (jrCliente.isSelected()) {
            insertarNuevoCliente();
        }else if (jrServicio.isSelected()) {
            insertarNuevoServicio();            
        }else{
            JOptionPane.showMessageDialog(this, "Debe seleccionar una opción", "Aviso", 1);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jrCiudadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrCiudadActionPerformed
        limpiar();
    }//GEN-LAST:event_jrCiudadActionPerformed

    private void jrClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrClienteActionPerformed
        limpiar();
    }//GEN-LAST:event_jrClienteActionPerformed

    private void jrServicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrServicioActionPerformed
        limpiar();
    }//GEN-LAST:event_jrServicioActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       Movimiento mov=new Movimiento();
       mov.setVisible(true);
      
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnConsultar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnSalir;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JRadioButton jrCiudad;
    private javax.swing.JRadioButton jrCliente;
    private javax.swing.JRadioButton jrServicio;
    private javax.swing.JTextField tfBusqueda;
    // End of variables declaration//GEN-END:variables

    private void consultarCiudad() {
        estadoModificacion();
        String filtro = tfBusqueda.getText();
        if(isNumeric(filtro)){
            Ciudad ciu = ciuController.recuperarPorCodigo(Integer.parseInt(tfBusqueda.getText()));
            if(ciu!=null){
                String [] nombreColumnas = {"Codigo", "Nombre", "Iso", "Activo"};
                Object[][] datos = new Object[1][nombreColumnas.length];
                for (int i = 0; i < 1; i++) {
                    datos[i][0] = ciu.getCodigo();
                    datos[i][1] = ciu.getNombre();
                    datos[i][2] = ciu.getIso();
                    datos[i][3] = ciu.getEstado();
                }
                modelo = new DefaultTableModel(datos, nombreColumnas);
                this.jTable1.setModel(modelo);
                jTable1.getColumnModel().getColumn( 3 ).setCellEditor( new Celda_CheckBox() );
                jTable1.getColumnModel().getColumn( 3 ).setCellRenderer(new Render_CheckBox());
            }else{
                JOptionPane.showMessageDialog(this, "No existe esta ciudad");
                tfBusqueda.setText("");
                tfBusqueda.requestFocus();
            }
        }else{
            listaCiudad = ciuController.recuperarPorFiltro(tfBusqueda.getText());
            String [] nombreColumnas = {"Codigo", "Nombre", "Iso", "Activo"};
            Object[][] datos = new Object[listaCiudad.size()][nombreColumnas.length];
            for (int i = 0; i < listaCiudad.size(); i++) {
                datos[i][0] = listaCiudad.get(i).getCodigo();
                datos[i][1] = listaCiudad.get(i).getNombre();
                datos[i][2] = listaCiudad.get(i).getIso();
                datos[i][3] = listaCiudad.get(i).getEstado();
            }
            modelo = new DefaultTableModel(datos, nombreColumnas);
            this.jTable1.setModel(modelo);
            jTable1.getColumnModel().getColumn( 3 ).setCellEditor( new Celda_CheckBox() );
            jTable1.getColumnModel().getColumn( 3 ).setCellRenderer(new Render_CheckBox());
        }
    }

    private void consultarCliente() {
        estadoModificacion();
        String filtro = tfBusqueda.getText();
        if(isNumeric(filtro)){
            Cliente clie = clieController.recuperarPorCodigo(Integer.parseInt(tfBusqueda.getText()));
            if(clie!=null){
                String [] nombreColumnas = {"Codigo", "Nombre", "Apellido","Celular","Direccion","Estado", "Credito", "CodigoCiudad"};
                Object[][] datos = new Object[1][nombreColumnas.length];
                for (int i=0; i< 1; i++){
                    datos[i][0] = clie.getCodigo();
                    datos[i][1] = clie.getNombres();
                    datos[i][2] = clie.getApellidos();
                    datos[i][5] = clie.getCelular();
                    datos[i][3] = clie.getDireccion();
                    comboCiudad.setSelectedIndex(clie.getCiudad_codigo()-1);
                    datos[i][7] = clie.isEstado();
                    datos[i][6] = clie.getCredito();
                    datos[i][4] = comboCiudad.getSelectedItem();
                }
                modelo = new DefaultTableModel(datos, nombreColumnas);
                this.jTable1.setModel(modelo);
                jTable1.getColumnModel().getColumn( 7 ).setCellEditor( new Celda_CheckBox() );
                jTable1.getColumnModel().getColumn( 7 ).setCellRenderer(new Render_CheckBox());

                TableColumn columna = jTable1.getColumnModel().getColumn(4);
                TableCellEditor editor = new DefaultCellEditor(comboCiudad);
                columna.setCellEditor(editor);

            }else{
                JOptionPane.showMessageDialog(this, "No existe este cliente");
                tfBusqueda.setText("");
                tfBusqueda.requestFocus();
            }
        }else{
            
            List<Cliente> listaCliente = clieController.recuperarPorFiltro(tfBusqueda.getText());
            String [] nombreColumnas = {"Codigo", "Nombre", "Apellido", "Direccion", "Ciudad", "Celular", "Credito", "Activo"};
            Object[][] datos = new Object[listaCliente.size()][nombreColumnas.length];
            for (int i=0; i< listaCliente.size(); i++){
                datos[i][0] = listaCliente.get(i).getCodigo();
                datos[i][1] = listaCliente.get(i).getNombres();
                datos[i][2] = listaCliente.get(i).getApellidos();
                datos[i][3] = listaCliente.get(i).getDireccion();
                comboCiudad.setSelectedIndex(listaCliente.get(i).getCiudad_codigo()-1);
                datos[i][4] = comboCiudad.getSelectedItem();
                datos[i][5] = listaCliente.get(i).getCelular();
                datos[i][6] = Utilidad.formatoValorS(listaCliente.get(i).getCredito());
                datos[i][7] = listaCliente.get(i).isEstado();
            }
            modelo = new DefaultTableModel(datos, nombreColumnas);
            this.jTable1.setModel(modelo);
            jTable1.getColumnModel().getColumn( 7 ).setCellEditor( new Celda_CheckBox() );
            jTable1.getColumnModel().getColumn( 7 ).setCellRenderer(new Render_CheckBox());
            
            TableColumn columna = jTable1.getColumnModel().getColumn(4);
            TableCellEditor editor = new DefaultCellEditor(comboCiudad);
            columna.setCellEditor(editor);
        }
    }

    private void consultarServicio() {
        estadoModificacion();
        String filtro = tfBusqueda.getText();
        if(isNumeric(filtro)){
            Servicio serv = serController.recuperarPorCodigo(Integer.parseInt(tfBusqueda.getText()));
            if(serv!=null){
                String [] nombreColumnas = {"Codigo", "Nombre", "Descripcion", "Precio Unitario", "Activo"};
                Object[][] datos = new Object[1][nombreColumnas.length];
                for (int i = 0; i < 1; i++) {
                    datos[i][0] = serv.getCodigo();
                    datos[i][1] = serv.getNombre();
                    datos[i][2] = serv.getDescripcion();
                    datos[i][3] = Utilidad.formatoValorS(serv.getValor_unitario());
                }
                modelo = new DefaultTableModel(datos, nombreColumnas);
                this.jTable1.setModel(modelo);
                jTable1.getColumnModel().getColumn( 4 ).setCellEditor( new Celda_CheckBox() );
                jTable1.getColumnModel().getColumn( 4 ).setCellRenderer(new Render_CheckBox());
            }else{
                
            }
        }else{
        List<Servicio> listaServicio = serController.recuperarPorFiltro(tfBusqueda.getText());// aca carga el resultado del dao
        String [] nombreColumnas = {"Codigo", "Nombre", "Descripcion", "Precio Unitario", "Activo"};// en este vector se pone los nombres de las colomnas
        Object[][] datos = new Object[listaServicio.size()][nombreColumnas.length];
        for (int i = 0; i < listaServicio.size(); i++) {
            datos[i][0] = listaServicio.get(i).getCodigo();
            datos[i][1] = listaServicio.get(i).getNombre();
            datos[i][2] = listaServicio.get(i).getDescripcion();
            datos[i][3] = listaServicio.get(i).getValor_unitario();
            datos[i][4] = listaServicio.get(i).isEstado();
        }
        modelo = new DefaultTableModel(datos, nombreColumnas);
        this.jTable1.setModel(modelo);
        jTable1.getColumnModel().getColumn( 4 ).setCellEditor( new Celda_CheckBox() );
        jTable1.getColumnModel().getColumn( 4 ).setCellRenderer(new Render_CheckBox());
        }
    }

    private void insertarNuevaCiudad() {
        jLabel1.setText("Atencion: esta a punto de insertar una Nueva Ciudad");
        Ciudad ciudad = new Ciudad();
        String [] nombreColumnas = {"Nombre", "Iso", "Estado"};// en este vector se pone los nombres de las colomnas
        Object[][] datos = new Object[1][nombreColumnas.length];
        for (int i = 0; i < 1; i++) {
            datos[i][0] = ciudad.getNombre();
            datos[i][1] = ciudad.getIso();
            datos[i][2] = ciudad.getEstado();
        }
        modelo = new DefaultTableModel(datos, nombreColumnas);
        this.jTable1.setModel(modelo);
        jTable1.getColumnModel().getColumn( 2 ).setCellEditor( new Celda_CheckBox() );
        jTable1.getColumnModel().getColumn( 2 ).setCellRenderer(new Render_CheckBox());
        estadoInsercion();
    }

    private void insertarNuevoCliente() {
        
        jLabel1.setText("Atencion: esta a punto de insertar un Nuevo Cliente");
        Cliente cliente = new Cliente();
        String [] nombreColumnas = {"Nombre", "Apellido", "Direccion", "Ciudad", "Celular", "Credito", "Estado"};
        Object[][] datos = new Object[1][nombreColumnas.length];
        for (int i = 0; i < 1; i++) {
            datos[i][0] = cliente.getNombres();
            datos[i][1] = cliente.getApellidos();
            datos[i][2] = cliente.getDireccion();
            datos[i][3] = comboCiudad.getSelectedItem();
            datos[i][4] = cliente.getCelular();
            datos[i][5] = cliente.getCredito();
            datos[i][6] = cliente.isEstado();
        }
        modelo = new DefaultTableModel(datos, nombreColumnas);
        this.jTable1.setModel(modelo);
        jTable1.getColumnModel().getColumn( 6 ).setCellEditor( new Celda_CheckBox() );
        jTable1.getColumnModel().getColumn( 6 ).setCellRenderer(new Render_CheckBox());
        comboCiudad.setModel(modeloCombo);
        TableColumn columna = jTable1.getColumnModel().getColumn(3);
        TableCellEditor editor = new DefaultCellEditor(comboCiudad);
        columna.setCellEditor(editor);
        
        estadoInsercion();
    }

    private void insertarNuevoServicio() {
        jLabel1.setText("Atencion: esta a punto de insertar un Nuevo Servicio");
        Servicio serivicio = new Servicio();
        String [] nombreColumnas = {"Nombre", "Descripcion", "Precio Unitario", "estado"};
        Object[][] datos = new Object[1][nombreColumnas.length];
        for (int i = 0; i < 1; i++) {
            datos[i][0] = serivicio.getNombre();
            datos[i][1] = serivicio.getDescripcion();
            datos[i][2] = serivicio.getValor_unitario();
            datos[i][3] = serivicio.isEstado();            
        }
        modelo = new DefaultTableModel(datos, nombreColumnas);
        this.jTable1.setModel(modelo);
        jTable1.getColumnModel().getColumn( 3 ).setCellEditor( new Celda_CheckBox() );
        jTable1.getColumnModel().getColumn( 3 ).setCellRenderer(new Render_CheckBox());
        estadoInsercion();
    }

    private void guardarCiudad() {
        if (edicion) {
        Ciudad ciudad = new Ciudad(
                Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString()),
                jTable1.getValueAt(jTable1.getSelectedRow(), 1).toString(),
                jTable1.getValueAt(jTable1.getSelectedRow(), 2).toString(),
                Boolean.parseBoolean(jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString()));
            ciuController.modificar(ciudad);
            JOptionPane.showMessageDialog(this, "Ciudad modificada");
            limpiar();
        }else{
        Ciudad ciudad = new Ciudad(            
            jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString(),
            jTable1.getValueAt(jTable1.getSelectedRow(), 1).toString(),
            (boolean)jTable1.getValueAt(jTable1.getSelectedRow(), 2));
            ciuController.registrar(ciudad);
            JOptionPane.showMessageDialog(this, "Nueva ciudad guardada");
            limpiar();
        }
    }

    private void guardarCliente() {
        if (edicion) {
            comboCiudad.setSelectedItem(jTable1.getValueAt(jTable1.getSelectedRow(), 4).toString());
        Cliente cliente = new Cliente(
                Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString()),
                jTable1.getValueAt(jTable1.getSelectedRow(), 1).toString(), 
                jTable1.getValueAt(jTable1.getSelectedRow(), 2).toString(), 
                jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString(), 
                comboCiudad.getSelectedIndex()+1, 
                jTable1.getValueAt(jTable1.getSelectedRow(), 5).toString(), 
                Utilidad.formatoValorD(jTable1.getValueAt(jTable1.getSelectedRow(), 6).toString()), 
                Boolean.parseBoolean(jTable1.getValueAt(jTable1.getSelectedRow(), 7).toString()));
            clieController.modificar(cliente);
            JOptionPane.showMessageDialog(this, "Cliente modificado");
            limpiar();
        }else{
            comboCiudad.setSelectedItem(jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString());
            Cliente cliente = new Cliente(
                jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString(), 
                jTable1.getValueAt(jTable1.getSelectedRow(), 1).toString(), 
                jTable1.getValueAt(jTable1.getSelectedRow(), 2).toString(), 
                comboCiudad.getSelectedIndex()+1, 
                jTable1.getValueAt(jTable1.getSelectedRow(), 4).toString(), 
                Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 5).toString()), 
                Boolean.parseBoolean(jTable1.getValueAt(jTable1.getSelectedRow(), 6).toString()));    
            clieController.registrar(cliente);
            JOptionPane.showMessageDialog(this, "Nuevo cliente guardado");
            limpiar();
        }
    }

    private void guardarServicio() {
        if (edicion) {
        Servicio servicio = new Servicio(
                Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString()),
                jTable1.getValueAt(jTable1.getSelectedRow(), 1).toString(), 
                jTable1.getValueAt(jTable1.getSelectedRow(), 2).toString(), 
                Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString()), 
                Boolean.parseBoolean(jTable1.getValueAt(jTable1.getSelectedRow(), 4).toString()));
            serController.modificar(servicio);
            JOptionPane.showMessageDialog(this, "Servicio modificado");
            limpiar();
        }else{
        Servicio servicio = new Servicio(
                jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString(), 
                jTable1.getValueAt(jTable1.getSelectedRow(), 1).toString(), 
                Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 2).toString()), 
                Boolean.parseBoolean(jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString()));    
            serController.insertar(servicio);
            JOptionPane.showMessageDialog(this, "Nuevo servicio guardado");
            limpiar();
        }
    
    }
    
    
    
    private boolean isNumeric( String s ){
        try{
            double y = Double.parseDouble( s );
            return true;
        }
        catch( NumberFormatException err ){
            return false;
        }
    }
    
    private void estadoInicial(){
        tfBusqueda.requestFocus();
        btnConsultar.setEnabled(true);
        jButton1.setEnabled(true);
        btnGuardar.setEnabled(false);
        btnEliminar.setEnabled(false);
        btnCancelar.setEnabled(false);
        btnSalir.setEnabled(true);
        jLabel1.setText("");
        edicion = false;
    }
    
    private void estadoInsercion(){
        tfBusqueda.requestFocus();
        btnConsultar.setEnabled(false);
        jButton1.setEnabled(false);
        btnGuardar.setEnabled(true);
        btnEliminar.setEnabled(false);
        btnCancelar.setEnabled(true);
        btnSalir.setEnabled(true);
        edicion = false;
    }
    
    private void estadoModificacion(){
        tfBusqueda.requestFocus();
        btnConsultar.setEnabled(true);
        jButton1.setEnabled(false);
        btnGuardar.setEnabled(true);
        btnEliminar.setEnabled(true);
        btnCancelar.setEnabled(true);
        btnSalir.setEnabled(true);
        jLabel1.setText("");
        edicion = true;
    }

    private void limpiar() {
        jTable1.setModel(modelo = new DefaultTableModel());
        estadoInicial();
    }
}
